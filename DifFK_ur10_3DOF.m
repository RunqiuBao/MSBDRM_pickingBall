%This file was automatically generated by the function --Generate_DifFK--
%The input vector is:
%u=[q1 q2 q3 qp1 qp2 qp3 L1 L3 L8 L2 L4 L5 L6 ]
%function Xp=DifFK_ur10_3DOF(u)
clc;
clear;
close all;

syms q1 q2 q3 qp1 qp2 qp3 L1 L2 L3 L4 L5 L6 L7 L8 L9 L10 L11 real


% Jacobian of cmi.
% Relative HT
H1_0=[ cos(q1), 0,  sin(q1),  0;
       sin(q1), 0, -cos(q1),  0;
             0, 1,        0, L1;
             0, 0,        0,  1];
         
H2_1=[  sin(q2), -cos(q2),  0,  -L3*sin(q2);
       -cos(q2), -sin(q2),  0,   L3*cos(q2);
              0,        0, -1,          L7;
              0,        0,  0,           1];

H3_2=[  sin(q3), 0, -cos(q3),        0;
       -cos(q3), 0, -sin(q3),        0;
              0, 1,        0, L7 - L11;
              0, 0,        0,        1];

Hcm1_0=[ cos(q1), -sin(q1), 0,  0;
         sin(q1),  cos(q1), 0,  0;
               0,        0, 1, L6;
               0,        0, 0,  1];

Hcm2_1=[  sin(q2), cos(q2), 0, -L8*sin(q2);
         -cos(q2), sin(q2), 0,  L8*cos(q2);
                0,       0, 1,          L7;
                0,       0, 0,           1];

Hcm3_2=[ cos(q3), -sin(q3), 0,   -L10*cos(q3);
         sin(q3),  cos(q3), 0,   -L10*sin(q3);
               0,        0, 1, L7 - L9 - L11;
               0,        0, 0,             1];
           
% Absolute HT
H2_0=simplify(H1_0*H2_1);
H3_0=simplify(H2_0*H3_2);

Hcm2_0=simplify(H1_0*Hcm2_1);
Hcm3_0=simplify(H2_0*Hcm3_2);

%% Jacobian of cmi.
tcm1_0=Hcm1_0(1:3,4);
tcm2_0=Hcm2_0(1:3,4);
tcm3_0=Hcm3_0(1:3,4);
t1_0=H1_0(1:3,4);
t2_0=H2_0(1:3,4);
t3_0=H3_0(1:3,4);

z0=sym([0;0;1]);
z1=H1_0(1:3,1:3)*z0;
z2=H2_0(1:3,1:3)*z0;

% Jcm1
Jcm11=[cross(z0,tcm1_0);z0];
Jcm12=sym(zeros(6,1));
Jcm13=sym(zeros(6,1));

Jcm1=[Jcm11 Jcm12 Jcm13];

% Jcm2
Jcm21=[cross(z0,tcm2_0);z0];
Jcm22=[cross(z1,(tcm2_0-t1_0));z1];
Jcm23=sym(zeros(6,1));

Jcm2=[Jcm21 Jcm22 Jcm23];
Jcm2=expand(Jcm2);
Jcm2=simplify(Jcm2);

% Jcm3
Jcm31=[cross(z0,tcm3_0);z0];
Jcm32=[cross(z1,(tcm3_0-t1_0));z1];
Jcm33=[cross(z2,(tcm3_0-t2_0));z2];

Jcm3=[Jcm31 Jcm32 Jcm33];
Jcm3=expand(Jcm3);
Jcm3=simplify(Jcm3);

% Complete the Jacobian Matrix (symbolic form)
J1=[cross(z0,t3_0);z0];
J2=[cross(z1,(t3_0-t1_0));z1];
J3=[cross(z2,(t3_0-t2_0));z2];

Jef=[J1 J2 J3];

% Compute the vector of cartesian velocities for the end-effector (using
% the Jacobian)
Xp=Jef*[qp1 qp2 qp3]';
